#include "Disabler.h"
#include "../pch.h"

using namespace std;
Disabler::Disabler() : IModule(0, Category::EXPLOIT, "Disables certain anticheat checks") {
    registerEnumSetting("Mode", &mode, 0);
    mode.addEntry("(GroundSpoof)", 0);
    mode.addEntry("(Sentinel Off)", 1);
    mode.addEntry("(Sentinel Dong)", 2);
    mode.addEntry("(GWEN Off)", 3);
    mode.addEntry("(Flareon Off)", 4);
    registerIntSetting("Ticks", &ticks, ticks, 1, 10);
    registerIntSetting("Multiplier", &multiplier, multiplier, 1, 200);
}

const char* Disabler::getRawModuleName() {
    return "Bypass";
}

const char* Disabler::getModuleName() {
    name = string("Bypass ") + string(GRAY) + mode.GetEntry(mode.getSelectedValue()).GetName();
    return name.c_str();
}

void Disabler::onEnable() {
    tick = 0;
}

void Disabler::onTick(C_GameMode* gm) {
    auto player = g_Data.getLocalPlayer();
    if (player == nullptr) return;
    tick++;

    switch (mode.getSelectedValue()) {
    case 0: // GroundSpoof
        C_MovePlayerPacket packet(g_Data.getLocalPlayer(), *g_Data.getLocalPlayer()->getPos()); packet.onGround = false;
        g_Data.getClientInstance()->loopbackPacketSender->sendToServer(&packet);
        break;
    }
}

void Disabler::onMove(C_MoveInputHandler* input) {
    auto player = g_Data.getLocalPlayer();
    if (player == nullptr) return;
}

void Disabler::onSendPacket(C_Packet* packet) {
    C_GameSettingsInput* input = g_Data.getClientInstance()->getGameSettingsInput();
    auto player = g_Data.getLocalPlayer();
    if (player == nullptr) return;

    auto scaffold = moduleMgr->getModule<Scaffold>();
    auto flight = moduleMgr->getModule<Flight>();
    auto speed = moduleMgr->getModule<Speed>();

    vec3_t pos = *player->getPos();
    double mathGroundRand = round(pos.y / 0.015625) * randomFloat(0.015625, 0.015629);
    float velocityxz = g_Data.getLocalPlayer()->velocity.magnitudexz();
    double mathGroundFly = round(pos.y / 0.015625) * 0.015645;
    double mathGround = round(pos.y / 0.015625) * 0.015625;

    if (packet->isInstanceOf<C_MovePlayerPacket>()) {
        C_MovePlayerPacket* movePacket = reinterpret_cast<C_MovePlayerPacket*>(packet);
        switch (mode.getSelectedValue()) {
        case 2: // Hive
            break;
        }
    }

    if (packet->isInstanceOf<PlayerAuthInputPacket>()) {
        PlayerAuthInputPacket* authInputPacket = (PlayerAuthInputPacket*)packet;
        switch (mode.getSelectedValue()) {
        case 1: // Cubecraft
            break;
        }
    }

    if (packet->isInstanceOf<NetworkLatencyPacket>()) {
        NetworkLatencyPacket* netStack = (NetworkLatencyPacket*)packet;
        switch (mode.getSelectedValue()) {
        case 2: // Hive
            break;
        }
    }
}